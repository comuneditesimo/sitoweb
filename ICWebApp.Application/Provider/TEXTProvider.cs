using ICWebApp.Application.Interface.Services;
using ICWebApp.Application.Interface.Provider;
using ICWebApp.DataStore.MSSQL.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ICWebApp.DataStore;
using System.Globalization;
using System.Collections;
using ICWebApp.Domain.DBModels;
using System.Diagnostics;
using ICWebApp.Application.Settings;
using ICWebApp.DataStore.MSSQL.Interfaces.UnitOfWork;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;
using Microsoft.EntityFrameworkCore;
using ICWebApp.Application.Interface.Cache;

namespace ICWebApp.Application.Provider
{
    public class TEXTProvider : ITEXTProvider
    {
        private IUnitOfWork _unitOfWork;
        private ITEXTProviderCache _textProviderCache;

        public TEXTProvider(IUnitOfWork _unitOfWork, ITEXTProviderCache _textProviderCache)
        {
            this._unitOfWork = _unitOfWork;
            this._textProviderCache = _textProviderCache;
        }
        public string Get(string Code, Guid? LanguageID = null)
        {
            Guid Lang = LanguageSettings.German;

            var Language = _unitOfWork.Repository<LANG_Languages>().First(p => p.Code == CultureInfo.CurrentCulture.Name);

            if (Language != null)
            {
                Lang = Language.ID;
            }

            if(LanguageID != null)
            {
                Lang = LanguageID.Value;
            }

            var msg = _textProviderCache.Get(Code, Lang);

            if (msg != null)
                return msg.Text;

            msg = _unitOfWork.Repository<TEXT_SystemTexts>().FirstOrDefault(p => p.Code == Code && p.LANG_LanguagesID == Lang);

            if (msg != null)
            {
                _textProviderCache.Save(msg);

                return msg.Text;
            }

            return "{NOT_IMPLEMENTED}";
        }        
        public TEXT_SystemTexts? Set(string Code, string Text, Guid LanguageID)
        {
            var text = new TEXT_SystemTexts();

            text.ID = Guid.NewGuid();
            text.LANG_LanguagesID = LanguageID;
            text.Code = Code;
            text.Text = Text;
            text.AutoGenerated = true;


            return _unitOfWork.Repository<TEXT_SystemTexts>().InsertOrUpdate(text);
        }
        public string SelectLanguage(string? GermanText, string? ItalianText)
        {
            Guid Lang = LanguageSettings.German;

            var Language = _unitOfWork.Repository<LANG_Languages>().First(p => p.Code == CultureInfo.CurrentCulture.Name);

            if (Language != null)
            {
                Lang = Language.ID;
            }

            if (Lang == LanguageSettings.German)
            {
                return GermanText ?? "";
            }
            else
            {
                return ItalianText ?? "";
            }
        }
        public string GetOrCreate(string Code, Guid? LanguageID = null)
        {
            Guid Lang = LanguageSettings.German;

            var Language = _unitOfWork.Repository<LANG_Languages>().First(p => p.Code == CultureInfo.CurrentCulture.Name);

            if (Language != null)
            {
                Lang = Language.ID;
            }

            if (LanguageID != null)
            {
                Lang = LanguageID.Value;
            }

            var msg = _textProviderCache.Get(Code, Lang);

            if (msg != null)
                return msg.Text;

            msg = _unitOfWork.Repository<TEXT_SystemTexts>().FirstOrDefault(p => p.Code == Code && p.LANG_LanguagesID == Lang);

            if (msg != null)
            {
                _textProviderCache.Save(msg);

                return msg.Text;
            }

            msg = Set(Code, Code, Lang);
                
            return msg.Text;
        }
        public string GetOrReturnCode(string Code)
        {
            Guid Lang = LanguageSettings.German;

            var Language = _unitOfWork.Repository<LANG_Languages>().First(p => p.Code == CultureInfo.CurrentCulture.Name);

            if (Language != null)
            {
                Lang = Language.ID;
            }

            var msg = _textProviderCache.Get(Code, Lang);

            if (msg != null)
                return msg.Text;

            msg = _unitOfWork.Repository<TEXT_SystemTexts>().FirstOrDefault(p => p.Code == Code && p.LANG_LanguagesID == Lang);

            if (msg != null)
            {
                _textProviderCache.Save(msg);

                return msg.Text;
            }

            return Code;
        }
        public async Task<List<V_Translations>> GetTexts()
        {
            return await _unitOfWork.Repository<V_Translations>().ToListAsync();
        }
        public async Task<TEXT_SystemTexts?> Set(TEXT_SystemTexts Data)
        {
            return await _unitOfWork.Repository<TEXT_SystemTexts>().InsertOrUpdateAsync(Data);
        }
        public TEXT_SystemTexts? Get(Guid? TextID)
        {
            return _unitOfWork.Repository<TEXT_SystemTexts>().FirstOrDefault(p => p.ID == TextID);
        }
        public async Task<List<V_TEXT_Template>> GetTemplates(Guid AUTH_Municipality_ID, string ExternalContext, string ExternalID, bool? IsDocument = null)
        {
            Guid Lang = LanguageSettings.German;

            var Language = _unitOfWork.Repository<LANG_Languages>().First(p => p.Code == CultureInfo.CurrentCulture.Name);

            if (Language != null)
            {
                Lang = Language.ID;
            }

            if(IsDocument != null)
            {
                return await _unitOfWork.Repository<V_TEXT_Template>().Where(p => p.AUTH_Municipality_ID == AUTH_Municipality_ID && p.LANG_Languages_ID == Lang
                                                                         && p.ExternalContext == ExternalContext && p.ExternalID == ExternalID && p.IsDocument == IsDocument).ToListAsync();
            }

            return await _unitOfWork.Repository<V_TEXT_Template>().Where(p => p.AUTH_Municipality_ID == AUTH_Municipality_ID && p.LANG_Languages_ID == Lang
                                                                     && p.ExternalContext == ExternalContext && p.ExternalID == ExternalID).ToListAsync();
        }
        public async Task<TEXT_Template?> GetTemplate(Guid ID)
        {
            return await _unitOfWork.Repository<TEXT_Template>().FirstOrDefaultAsync(p => p.ID == ID);
        }
        public async Task<TEXT_Template?> SetTemplate(TEXT_Template Data)
        {
            return await _unitOfWork.Repository<TEXT_Template>().InsertOrUpdateAsync(Data);
        }
        public async Task<List<TEXT_Template_Extended>> GetTemplateExtended(Guid TEXT_Template_ID)
        {
            return await _unitOfWork.Repository<TEXT_Template_Extended>().Where(p => p.TEXT_Template_ID == TEXT_Template_ID).ToListAsync();
        }
        public async Task<TEXT_Template_Extended?> SetTemplateExtended(TEXT_Template_Extended Data)
        {
            return await _unitOfWork.Repository<TEXT_Template_Extended>().InsertOrUpdateAsync(Data);
        }
        public async Task<TEXT_Template_Default?> GetDefaultTemplate(Guid LANG_Language_ID, bool? IsDocument = null)
        {
            if (IsDocument != null)
            {
                return await _unitOfWork.Repository<TEXT_Template_Default>().FirstOrDefaultAsync(p => p.LANG_Languages_ID == LANG_Language_ID && p.IsDocument == IsDocument);
            }

            return await _unitOfWork.Repository<TEXT_Template_Default>().FirstOrDefaultAsync(p => p.LANG_Languages_ID == LANG_Language_ID);
        }
        public async Task<bool> RemoveTemplate(Guid TEXT_Template_ID)
        {
            return await _unitOfWork.Repository<TEXT_Template>().DeleteAsync(TEXT_Template_ID);
        }
        public async Task<List<TEXT_Template_Keyword>> GetTemplateKeywords(string ExternalContext, Guid LANG_Language_ID)
        {
            return await _unitOfWork.Repository<TEXT_Template_Keyword>().Where(p => (p.ExternalContext == ExternalContext || p.ExternalContext == null) && p.LANG_Languages_ID == LANG_Language_ID).ToListAsync();
        }
        public async Task<List<TEXT_Template_Keyword>> GetTemplateKeywords(string ExternalContext)
        {
            return await _unitOfWork.Repository<TEXT_Template_Keyword>().Where(p => (p.ExternalContext == ExternalContext || p.ExternalContext == null)).ToListAsync();
        }
        public async Task<V_TEXT_Template?> GetTemplate(Guid AUTH_Municipality_ID, Guid LanguageID, string ExternalContext, string ExternalID)
        {
            return await _unitOfWork.Repository<V_TEXT_Template>().FirstOrDefaultAsync(p => p.AUTH_Municipality_ID == AUTH_Municipality_ID && p.LANG_Languages_ID == LanguageID && p.ExternalContext == ExternalContext && p.ExternalID == ExternalID);
        }
        public async Task<string> ReplaceGeneralKeyWords(Guid AUTH_Users_ID, string Text)
        {
            var authUser = await _unitOfWork.Repository<AUTH_Users_Anagrafic>().FirstOrDefaultAsync(p => p.AUTH_Users_ID == AUTH_Users_ID);

            if (authUser != null) 
            {
                Text = Text.Replace("{Steuernummer Antragsteller}", authUser.FiscalNumber);
                Text = Text.Replace("{Codice fiscale richiedente}", authUser.FiscalNumber);
                Text = Text.Replace("{Vorname}", authUser.FirstName);
                Text = Text.Replace("{Nome}", authUser.FirstName);
                Text = Text.Replace("{Nachname}", authUser.LastName);
                Text = Text.Replace("{Cognome}", authUser.LastName);
                Text = Text.Replace("{E-Mail}", authUser.Email);
                Text = Text.Replace("{Telefonnummer}", authUser.MobilePhone);
                Text = Text.Replace("{Numero di telefono}", authUser.MobilePhone);
                Text = Text.Replace("{Wohnadresse}", authUser.DomicileStreetAddress + ", "  + authUser.DomicilePostalCode + " " + authUser.DomicileProvince);
                Text = Text.Replace("{Indirizzo}", authUser.DomicileStreetAddress + ", " + authUser.DomicilePostalCode + " " + authUser.DomicileProvince);

                if (authUser.DateOfBirth != null)
                {

                    Text = Text.Replace("{Geburtsdatum}", authUser.DateOfBirth.Value.ToString("dd.MM.yyyy"));
                    Text = Text.Replace("{Data di nascita}", authUser.DateOfBirth.Value.ToString("dd.MM.yyyy"));
                }

                Text = Text.Replace("{Geburtsort}", authUser.PlaceOfBirth);
                Text = Text.Replace("{Luogo di nascita}", authUser.PlaceOfBirth);
            }

            return Text;
        }
    }
}