@page "/Hp/Type/Person/{TypeID}"

@using ICWebApp.Components.Components.Homepage.Frontend.Questionnaire
@using ICWebApp.Components.Components.Homepage.Frontend.Help
@using ICWebApp.Components.Components.Homepage.Frontend.Person

@if (Type != null)
{
    @if (Items != null && Items.Where(p => p.Highlight == true).Any())
    {
        <div class="container py-5">
            <h2 class="title-xxlarge mb-4">@TextProvider.Get("FRONTEND_HOMEPAGE_THEME_HIGHLIGHTED")</h2>
            <div class="row g-4">
                @foreach (var n in Items.Where(p => p.Highlight == true).OrderBy(p => p.Fullname).ToList())
                {
                    <PersonItemLarge Person="n" TypeClickable="false"></PersonItemLarge>
                }
            </div>
        </div>
    }

    @if (Items != null)
    {
        <div class="bg-grey-card py-5">
            <button type="submit" class="d-none"></button>
            <div class="container">
                <h2 class="title-xxlarge mb-4">
                    @(TextProvider.Get("FRONTEND_HOMEPAGE_SEARCH_IN_TYPE").Replace("{0}", Type.Type_M))
                </h2>
                <div class="cmp-input-search">
                    <div class="form-group autocomplete-wrapper mb-2 mb-lg-4">
                        <div class="input-group">
                            <label for="autocomplete-autocomplete-three" class="visually-hidden">@TextProvider.Get("FORMS_FRONTEND_SEARCH_BY_KEYWORD")</label>
                            <input @bind-value="SearchText" type="search" class="autocomplete form-control" placeholder="@TextProvider.Get("FORMS_FRONTEND_SEARCH_BY_KEYWORD")" id="autocomplete-autocomplete-three" name="autocomplete-three">

                            <div class="input-group-append">
                                <button class="btn btn-primary" type="button" id="button-3">@TextProvider.Get("FORMS_FRONTEND_SEARCH_BUTTON")</button>
                            </div>

                            <span class="autocomplete-icon" aria-hidden="true">
                                <svg class="icon icon-sm icon-primary">
                                    <use href="css/bootstrap-italia/svg/sprites.svg#it-search"></use>
                                </svg>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="row g-4 row-overflow" id="load-more">
                    @foreach (var n in Items.Where(p => (SearchText == null || (p.Fullname != null && p.Fullname.ToLower().Contains(SearchText.ToLower())))).OrderBy(p => p.Fullname).Take(MaxCounter).ToList())
                    {
                        <PersonItemLarge Person="n" TypeClickable="false"></PersonItemLarge>
                    }
                </div>

                @if (MaxCounter < Items.Where(p => (SearchText == null || (p.Fullname != null && p.Fullname.ToLower().Contains(SearchText.ToLower())))).Count())
                {
                    <div class="d-flex justify-content-center mt-4" id="load-more-btn">
                        <button type="button" class="btn btn-outline-primary pt-15 pb-15 pl-90 pr-90 mb-30 mb-lg-50 full-mb text-button" @onclick="@ShowMore">
                            <span class="">@TextProvider.Get("HOMEPAGE_NEWS_SEARCH_MORE")</span>
                        </button>
                    </div>
                }
                else
                {
                    <p class="text-center text-paragraph-regular-medium mt-4 mb-0">
                        @TextProvider.Get("HOMEPAGE_NEWS_NOTHING_MORE")
                    </p>
                }
            </div>
        </div>
    }  
    @if (Types != null)
    {
        <div class="container py-5" id="argomento">
            <h2 class="title-xxlarge mb-4">@TextProvider.Get("HOMEPAGE_SEARCH_BY_TYPE")</h2>
            <div class="row g-4">
                @foreach (var t in Types.OrderBy(p => p.Type_M).ToList())
                {
                    <div class="col-md-6 col-xl-4">
                        <div class="cmp-card-simple card-wrapper pb-0 rounded border border-light">
                            <div class="card shadow-sm rounded">
                                <div class="card-body">
                                    @if (Type != null && t.ID != Type.ID)
                                    {
                                        <a class="text-decoration-none" @onclick="@(() => OnTypeClicked(t.ID))" data-element="news-category-link">
                                            <h3 class="card-title t-primary title-xlarge">@t.Type_M</h3>
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="text-decoration-none" data-element="news-category-link">
                                            <h3 class="card-title t-disabled title-xlarge">@t.Type_M</h3>
                                        </span>
                                    }
                                    <p class="text-secondary mb-0">
                                        @((MarkupString)t.Description)
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}