@page "/Backend/Homepage/Authorities/timeslots/{ID}"

@layout MainLayout

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Popups


@if (Authority != null)
{
    <div class="element-separator"></div>
    <div class="custom-background-default">
        <div class="form-group form-group-small">
            <div class="segment-title custom-color-primary">@TextProvider.Get("BACKEND_HOMEPAGE_AUTHORITY_TIMES")</div>
        </div>
        <div class="element-separator"></div>
        <div class="form-group form-group-small timeslot-container">
            <SfTab>
                <TabItems>
                    @for (int i = 0; i < 6; i++)
                    {
                        string HeaderString = "";
                        int weekday = 0;

                        if (i == 0)
                        {
                            HeaderString = "MONDAY";
                            weekday = 0;
                        }
                        else if (i == 1)
                        {
                            HeaderString = "TUESDAY";
                            weekday = 1;
                        }
                        else if (i == 2)
                        {
                            HeaderString = "WEDNESDAY";
                            weekday = 2;
                        }
                        else if (i == 3)
                        {
                            HeaderString = "THURSDAY";
                            weekday = 3;
                        }
                        else if (i == 4)
                        {
                            HeaderString = "FRIDAY";
                            weekday = 4;
                        }
                        else if (i == 5)
                        {
                            HeaderString = "SATURDAY";
                            weekday = 5;
                        }

                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="@TextProvider.Get(HeaderString)"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                <div class="weekday-container">
                                    <div class="header-row">
                                        <div class="header-item">
                                            @TextProvider.Get("BACKEND_HOMEPAGE_TIMES_FROM")
                                        </div>
                                        <div class="header-item">
                                            @TextProvider.Get("BACKEND_HOMEPAGE_TIMES_TO")
                                        </div>
                                        <div class="header-item item-action">
                                        </div>
                                    </div>
                                    @foreach (var day in Times.Where(p => p.Weekday == weekday).OrderBy(p => p.TimeFrom))
                                    {
                                        <div class="data-row">
                                            <div class="data-item">
                                                <InputDate Type="InputDateType.Time" class="form-control" @bind-Value="@day.TimeFrom" />
                                            </div>
                                            <div class="data-item">
                                                <InputDate Type="InputDateType.Time" class="form-control" @bind-Value="@day.TimeTo" />
                                            </div>
                                            <div class="data-item data-action">
                                                <div class="btn btn-secondary" @onclick="@(() => RemoveTime(day))">
                                                    <i class="fa-solid fa-trash"></i>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    <div class="add-row" @onclick="@(() => AddTime(weekday))">
                                        <div class="add-item">
                                            @TextProvider.Get("BACKEND_HOMEPAGE_TIMES_ADD")
                                        </div>
                                    </div>
                                </div>
                            </ContentTemplate>
                        </TabItem>
                    }
                </TabItems>
            </SfTab>
        </div>
        <div class="element-separator"></div>
        <div class="form-group form-group-small">
            <div class="segment-title custom-color-primary">@TextProvider.Get("BACKEND_HOMEPAGE_AUTHORITY_CLOSED_DAYS")</div>
        </div>
        <div class="element-separator"></div>
        <div class="form-group formgroup-small">
            <div class="date-container">
                <div class="btn btn-secondary" @onclick="Prior">
                    <i class="fa-light fa-chevron-left"></i>
                </div>
                <div class="date-title">@actualDate.ToString("MMMM - yyyy")</div>
                <div class="btn btn-secondary" @onclick="Next">
                    <i class="fa-light fa-chevron-right"></i>
                </div>
            </div>
            <div class="small-element-separator"></div>
            <div class="row calendar-container">
                <CustomLoader Visible="@IsDataBusy"></CustomLoader>
                <div class="col-md-2">
                    <div class="calender-container">
                        <TelerikCalendar Views="1"
                        Class="CanteenCal"
                        SelectionMode="@CalendarSelectionMode.Single"
                        Min="DateTime.Today.AddDays(Authority.MinDaysAheadOfBooking)"
                        Max="DateTime.Today.AddDays(Authority.MaxDaysBookable)"
                        DisabledDates="@DisabledDates"
                        ValueChanged="@SingleSelectionChangeHandler"
                        Date="@startDate1">
                            <MonthCellTemplate>
                                <span class="@GetDayStatusClass(context.Date)">
                                    @context.Date.Day
                                </span>
                            </MonthCellTemplate>
                        </TelerikCalendar>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="calender-container">
                        <TelerikCalendar Views="1"
                        Class="CanteenCal"
                        SelectionMode="@CalendarSelectionMode.Single"
                        Min="DateTime.Today.AddDays(Authority.MinDaysAheadOfBooking)"
                        Max="DateTime.Today.AddDays(Authority.MaxDaysBookable)"
                        DisabledDates="@DisabledDates"
                        ValueChanged="@SingleSelectionChangeHandler"
                        Date="@startDate2">
                            <MonthCellTemplate>
                                <span class="@GetDayStatusClass(context.Date)">
                                    @context.Date.Day
                                </span>
                            </MonthCellTemplate>
                        </TelerikCalendar>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="calender-container">
                        <TelerikCalendar Views="1"
                        Class="CanteenCal"
                        SelectionMode="@CalendarSelectionMode.Single"
                        Min="DateTime.Today.AddDays(Authority.MinDaysAheadOfBooking)"
                        Max="DateTime.Today.AddDays(Authority.MaxDaysBookable)"
                        DisabledDates="@DisabledDates"
                        ValueChanged="@SingleSelectionChangeHandler"
                        Date="@startDate3">
                            <MonthCellTemplate>
                                <span class="@GetDayStatusClass(context.Date)">
                                    @context.Date.Day
                                </span>
                            </MonthCellTemplate>
                        </TelerikCalendar>
                    </div>
                </div>
            </div>
        </div>
        <div class="element-separator"></div>
        <div class="form-group form-group-small">
            <div class="segment-title custom-color-primary">@TextProvider.Get("BACKEND_HOMEPAGE_AUTHORITY_REASONS")</div>
        </div>
        <div class="element-separator"></div>
        <div class="segment-container custom-background-default form-group-small">
            <div class="grid-data-container segment-loader-container">
                <SfGrid DataSource="@Reasons" AllowPaging="true" AllowSorting="true" AllowResizing="true" AllowFiltering="true" Height="100%">
                    <SfToolbar>
                        <ToolbarItems>
                            <ToolbarItem Type="ItemType.Button">
                                <Template>
                                    <div class="btn btn-secondary" @onclick="AddReason">@TextProvider.Get("ADD")</div>
                                </Template>
                            </ToolbarItem>
                        </ToolbarItems>
                    </SfToolbar>
                    <Syncfusion.Blazor.Grids.GridColumns>
                        <Syncfusion.Blazor.Grids.GridColumn Field="@nameof(V_AUTH_Authority_Reason.Title)" HeaderText="@TextProvider.Get("BACKEND_HOMEPAGE_AUTHORITY_TITLE")" Width="auto"></Syncfusion.Blazor.Grids.GridColumn>
                        <Syncfusion.Blazor.Grids.GridColumn Width="130px" HeaderText="@TextProvider.Get("ACTIONS")">
                            <Template>
                                @{
                                    V_AUTH_Authority_Reason item = context as V_AUTH_Authority_Reason;

                                    if (item != null)
                                    {
                                        <div class="action-button-container">
                                            <SfTooltip Content="@TextProvider.Get("TOOLTIP_DELETE")" Position="@Position.LeftCenter">
                                                <div class="btn btn-secondary btn-icon" @onclick="@(() => DeleteReason(item))">
                                                    <i class="fa-regular fa-trash-can"></i>
                                                </div>
                                            </SfTooltip>
                                            <SfTooltip Content="@TextProvider.Get("TOOLTIP_EDIT")" Position="@Position.LeftCenter">
                                                <div class="btn btn-secondary btn-icon" @onclick="@(() => EditReason(item))">
                                                    <i class="fa-regular fa-pen"></i>
                                                </div>
                                            </SfTooltip>
                                        </div>
                                    }
                                }
                            </Template>
                        </Syncfusion.Blazor.Grids.GridColumn>
                    </Syncfusion.Blazor.Grids.GridColumns>
                </SfGrid>
            </div>
        </div>
        <div class="element-separator"></div>
        <div class="form-button-container-separated form-group-small">
            <TelerikButton ButtonType="Telerik.Blazor.ButtonType.Button" ThemeColor="Secondary" Class="k-standalone-button"
            OnClick="@Cancel">@TextProvider.Get("BUTTON_CANCEL")</TelerikButton>
                <TelerikButton ButtonType="Telerik.Blazor.ButtonType.Button" ThemeColor="primary" Class="k-standalone-button"
                OnClick="@Save">@TextProvider.Get("BUTTON_SAVE")</TelerikButton>
            </div>
        </div>
    <SfDialog CssClass="syncfusion-modal-window"
    AllowDragging="false"
    IsModal="true"
    Width="600px"
    @bind-Visible="@ReasonEditWindowVisible">
        <DialogTemplates>
            <Header>@TextProvider.Get("BACKEND_HOMEPAGE_AUTHORITY_REASON")</Header>
            <Content>
                @if (Data != null)
                {
                    <div class="custom-background-default">
                        <EditForm Model="@Data">
                            <div class="form-group">
                                <LanguageInputSelector @bind-CurrentLanguage="@CurrentLanguage"></LanguageInputSelector>
                                </div>
                                <div class="form-group">
                                    <div class="small-element-separator"></div>
                                    <label class="form-label">@TextProvider.Get("BACKEND_HOMEPAGE_AUTHORITY_TITLE")</label>
                                <InputText name="@Guid.NewGuid()" @bind-Value="Data.AUTH_Authority_Reason_Extended.FirstOrDefault(p => p.LANG_Language_ID == CurrentLanguage).Title" class="form-control"></InputText>
                            </div>
                        </EditForm>
                    </div>
                }
            </Content>
        </DialogTemplates>
        <DialogEvents Closed="@CloseReasonEditWindow" />
        <DialogButtons>
            <DialogButton IsPrimary="false" Content="@TextProvider.Get("BUTTON_CANCEL")" OnClick="@CloseReasonEditWindow" />
            <DialogButton IsPrimary="true" Content="@TextProvider.Get("BUTTON_SAVE")" OnClick="@SaveReason" />
        </DialogButtons>
    </SfDialog>
}