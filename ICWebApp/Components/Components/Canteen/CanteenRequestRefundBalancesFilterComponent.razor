@{
    var modalCSS = "";

    if (Modal)
    {
        modalCSS = "filter-container-modal";
    }
}
@if (Filter != null)
{

    <div class="filter-container @modalCSS">
        @if (Modal)
        {
            <div class="font-normal filter-label custom-color-primary">
                @TextProvider.Get("FILTER_TEXTSEARCH_TITLE")
            </div>
            <div class="extra-small-element-separator"></div>
        }
        <div class="filter-search-first-row">
            <div class="filter-search-input">
                <EditForm Model="@Filter" OnValidSubmit="@(() => FilterSearch())">
                    <div class="filter-searchbar">
                        <input name="@Guid.NewGuid()" type="text" @bind-value="@Filter.Text" onfocus="this.select();" placeholder="@TextProvider.Get("SEARCH_KEYWORD_PLACEHOLDER")"></input>
                        @if (!Modal)
                        {
                            <button class="btn btn-primary searchbar-button" type="submit" @onclick:stopPropagation="true">
                                <TelerikFontIcon IconClass="@("fad fa-search")"></TelerikFontIcon>
                            </button>
                            <button class="btn btn-primary searchbar-button" type="button" @onclick="ToggleFilter" @onclick:stopPropagation="true">
                                <TelerikFontIcon IconClass="@("fad fa-sliders-h")"></TelerikFontIcon>
                            </button>
                        }
                    </div>
                </EditForm>
            </div>
            @if (!Modal)
            {
                @if (!string.IsNullOrEmpty(Filter.Text) ||
                    (Filter.CANTEEN_RequestRefundBalances_Status_ID != null && Filter.CANTEEN_RequestRefundBalances_Status_ID.Any()) ||
                     Filter.Auth_User_ID != null ||
                     Filter.SignedFrom != null ||
                     Filter.SignedTo != null
                    )
                {
                    <button class="btn btn-primary filter-clear-button" type="button" @onclick="ClearSearchBar" @onclick:stopPropagation="true">
                        <TelerikFontIcon IconClass="@("fa-regular fa-xmark")"></TelerikFontIcon>
                    </button>
                }
                else
                {
                    <button class="btn btn-secondary filter-clear-button" type="button" disabled="true" @onclick:stopPropagation="true">
                        <TelerikFontIcon IconClass="@("fa-regular fa-xmark")"></TelerikFontIcon>
                    </button>
                }
            }
        </div>
        <div class="small-element-separator"></div>
        @if (Modal)
        {
            <div class="font-normal filter-label custom-color-primary">
                @TextProvider.Get("FILTER_STATUS_TITLE")
            </div>
            <div class="extra-small-element-separator"></div>
        }
        @if (_statusList != null && _statusList.Count() > 1)
        {
            <div class="filter-element filter-authorities">
                @if (Filter.CANTEEN_RequestRefundBalances_Status_ID != null && Filter.CANTEEN_RequestRefundBalances_Status_ID.Any())
                {
                    <div class="btn btn-secondary authority-tag" @onclick="@(() => ClearTagFilter())" @onclick:stopPropagation="true">
                        <span>
                            <TelerikFontIcon IconClass="@("fa-duotone fa-filter-slash")"></TelerikFontIcon>
                            @TextProvider.Get("STATUS_TAG_FILTER_ALL")
                        </span>
                    </div>
                }
                else
                {
                    <div class="btn btn-primary authority-tag" @onclick:stopPropagation="true">
                        <span>
                            <TelerikFontIcon IconClass="@("fa-duotone fa-filter-slash")"></TelerikFontIcon>
                            @TextProvider.Get("STATUS_TAG_FILTER_ALL")
                        </span>
                    </div>
                }

                @foreach (CANTEEN_RequestRefundBalances_Status _status in _statusList.OrderBy(p => p.SortOrder))
                {
                    string buttonCSS = "btn-secondary";

                    if (Filter.CANTEEN_RequestRefundBalances_Status_ID != null && Filter.CANTEEN_RequestRefundBalances_Status_ID.Contains(_status.ID))
                    {
                        buttonCSS = "btn-primary";
                    }

                    <div class="btn @buttonCSS authority-tag" @onclick="@(() => AddFilter(_status.ID))" @onclick:stopPropagation="true">
                        <span>
                            <TelerikFontIcon IconClass="@_status.Icon"></TelerikFontIcon>
                            @TextProvider.Get(_status.TEXT_SystemTexts_Code)
                        </span>
                    </div>
                }
            </div>
        }
        @if (FilterWindowVisible || Modal)
        {
            string popupCSS = "filter-popup";
            string firstRowCSS = "filter-first-row";
            string secondRowCSS = "filter-first-row";

            if (Modal)
            {
                popupCSS = "no-popup";
                firstRowCSS = "";
                secondRowCSS = "";
            }

            <div class="@popupCSS" id="filter-popup">
                @if (!Modal)
                {
                    <div class="h5 custom-color-primary">
                        @TextProvider.Get("FILTER_TITLE")
                    </div>
                    <div class="extra-small-element-separator"></div>
                }
                else
                {
                    <div class="small-element-separator"></div>
                }

                <div class="@firstRowCSS">

                    <div class="extra-small-element-separator"></div>
                    <div class="font-normal">
                        <div class="filter-label custom-color-primary">
                            @TextProvider.Get("FILTER_USER_LABEL")
                        </div>
                        <div class="filter-element">
                            <TelerikComboBox ScrollMode="@DropDownScrollMode.Virtual"
                                             Data="@_userList"
                                             ValueField="@(nameof(V_CANTEEN_RequestRefundBalances_UsersWithRequests.ID))"
                                             TextField="@(nameof(V_CANTEEN_RequestRefundBalances_UsersWithRequests.EntireName))"
                                             @bind-Value="@Filter.Auth_User_ID"
                                             Width="100%"
                                             Filterable="true"
                                             PageSize="10"
                                             ItemHeight="30"
                                             Placeholder="@TextProvider.Get("FILTER_USER_PLACEHOLDER")"
                                             FilterOperator="@StringFilterOperator.Contains">
                                <ItemTemplate>
                                    <span>@($"{context.EntireName} ({context.FiscalNumber})")</span>
                                </ItemTemplate>
                            </TelerikComboBox>
                        </div>
                    </div>
                </div>
                <div class="small-element-separator"></div>
                <div class="@secondRowCSS">
                    <div class="filter-element">
                        <div class="filter-left">
                            <div class="font-normal custom-color-primary">
                                @TextProvider.Get("FILTER_SUBMITTED")
                            </div>
                            <div class="extra-small-element-separator"></div>
                            <div class="filter-submitted">
                                <div class="filter-date-element">
                                    <div class="filter-date-label font-small">
                                        @TextProvider.Get("FILTER_SUBMITTED_FROM")
                                    </div>
                                    <div class="filter-date-value">
                                        <TelerikDatePicker Format="dd.MM.yyyy" @bind-Value="Filter.SignedFrom" class="form-control"></TelerikDatePicker>
                                    </div>
                                </div>
                                <div class="filter-date-element">
                                    <div class="filter-date-label font-small">
                                        @TextProvider.Get("FILTER_SUBMITTED_TO")
                                    </div>
                                    <div class="filter-date-value">
                                        <TelerikDatePicker Format="dd.MM.yyyy" @bind-Value="Filter.SignedTo" class="form-control"></TelerikDatePicker>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @if (!Modal)
                {
                    <div class="small-element-separator">
                    </div>
                    <div class="filter-toolbar">
                        <div class="filter-search-button">
                            <button class="btn btn-primary" @onclick="@(() => FilterSearch())" type="button">@(TextProvider.Get("FITER_SEARCH"))</button>
                        </div>
                    </div>
                }
            </div>
        }

        @if (Modal)
        {
            <div class="element-separator"></div>
            <div class="filter-button-bar">
                @if (!string.IsNullOrEmpty(Filter.Text) ||
                    (Filter.CANTEEN_RequestRefundBalances_Status_ID != null && Filter.CANTEEN_RequestRefundBalances_Status_ID.Any()) ||
                     Filter.Auth_User_ID != null ||
                     Filter.SignedFrom != null ||
                     Filter.SignedTo != null
                    )
                {
                    <TelerikButton OnClick="@ClearSearchBar" ButtonType="ButtonType.Button" ThemeColor="Secondary" Class="form-filter-button btn btn-secondary" Icon="@("fa-regular fa-xmark")">@TextProvider.Get("FILTER_CLEAR")</TelerikButton>
                }
                else
                {
                    <TelerikButton OnClick="@ClearSearchBar" ButtonType="ButtonType.Button" Enabled="false" ThemeColor="Secondary" Class="form-filter-button btn btn-secondary" Icon="@("fa-regular fa-xmark")">@TextProvider.Get("FILTER_CLEAR")</TelerikButton>
                }

                <TelerikButton OnClick="@FilterSearch" ButtonType="ButtonType.Button" ThemeColor="Primary" Class="form-filter-button btn btn-primary" Icon="@("fad fa-search")">@TextProvider.Get("FILTER_SEARCH")</TelerikButton>
            </div>
        }
    </div>
}