@using ICWebApp.Components.Components.Homepage.Backend.Person
@using ICWebApp.Components.Components.Homepage.Backend.Authority
@using ICWebApp.Components.Components.Homepage.Backend.Address
@using ICWebApp.Components.Components.Homepage.Backend.Theme
@using ICWebApp.Components.Components.Homepage.Backend.Documents

@if(Data != null && CurrentLanguage != null)
{
    <EditForm Model="Data">
        <DataAnnotationsValidator />
        <div class="form-group">
            <div class="segment-title custom-color-primary">@TextProvider.Get("BACKEND_HOMEPAGE_DOCUMENT_GENERAL")</div>
        </div>
        <div class="small-element-separator"></div>
        <LanguageInputSelector @bind-CurrentLanguage="@CurrentLanguage"></LanguageInputSelector>
        <div class="small-element-separator"></div>
        <div class="form-group">
            <label class="form-label">@TextProvider.Get("BACKEND_HOMEPAGE_DOCUMENT_TITLE")</label>
            @if (Data.HOME_Document_Extended != null && Data.HOME_Document_Extended.Count() > 0 && CurrentLanguage != null)
            {
                <label class="font-detail">@Data.HOME_Document_Extended.FirstOrDefault(p => p.LANG_Language_ID != CurrentLanguage).Title</label>
            }
            <InputText name="@Guid.NewGuid()" @bind-Value="Data.HOME_Document_Extended.FirstOrDefault(p => p.LANG_Language_ID == CurrentLanguage).Title" class="form-control"></InputText>
        </div>
        <div class="small-element-separator"></div>
        <div class="form-group">
            <label class="form-label">@TextProvider.Get("BACKEND_HOMEPAGE_DOCUMENT_DESCRIPTION_SHORT")</label>
        </div>
        <div class="form-group">
            @if (Data.HOME_Document_Extended != null && Data.HOME_Document_Extended.Count() > 0 && CurrentLanguage != null)
            {

                @if (string.IsNullOrEmpty(Data.HOME_Document_Extended.FirstOrDefault(p => p.LANG_Language_ID == CurrentLanguage).DescriptionShort))
                {
                    Data.HOME_Document_Extended.FirstOrDefault(p => p.LANG_Language_ID == CurrentLanguage).DescriptionShort = Data.HOME_Document_Extended.FirstOrDefault(p => p.LANG_Language_ID != CurrentLanguage).DescriptionShort;
                }

                <TelerikEditor @bind-Value="Data.HOME_Document_Extended.FirstOrDefault(p => p.LANG_Language_ID == CurrentLanguage).DescriptionShort"
                               Tools="@Tools"
                               EditMode="@EditorEditMode.Div"
                               Class="font-normal"
                               Height="150px">
                    <EditorSettings>
                        <EditorPasteSettings ConvertMsLists="true"
                                             RemoveMsClasses="true"
                                             RemoveMsStyles="true"
                                             RemoveHtmlComments="true"
                                             RemoveAllAttributes="true"
                                             StripTags="@StripTags"
                                             RemoveAttributes="@RemoveAttributes">
                        </EditorPasteSettings>
                    </EditorSettings>
                </TelerikEditor>
            }
        </div>
        <div class="small-element-separator"></div>
        <div class="form-group">
            <label class="form-label">@TextProvider.Get("BACKEND_HOMEPAGE_DOCUMENT_DESCRIPTION")</label>
        </div>
        <div class="form-group">
            @if (Data.HOME_Document_Extended != null && Data.HOME_Document_Extended.Count() > 0 && CurrentLanguage != null)
            {
                @if (string.IsNullOrEmpty(Data.HOME_Document_Extended.FirstOrDefault(p => p.LANG_Language_ID == CurrentLanguage).Description))
                {
                    Data.HOME_Document_Extended.FirstOrDefault(p => p.LANG_Language_ID == CurrentLanguage).Description = Data.HOME_Document_Extended.FirstOrDefault(p => p.LANG_Language_ID != CurrentLanguage).Description;
                }

                <TelerikEditor @bind-Value="Data.HOME_Document_Extended.FirstOrDefault(p => p.LANG_Language_ID == CurrentLanguage).Description"
                               Tools="@Tools"
                               EditMode="@EditorEditMode.Div"
                               Class="font-normal"
                               Height="250px">
                    <EditorSettings>
                        <EditorPasteSettings ConvertMsLists="true"
                                             RemoveMsClasses="true"
                                             RemoveMsStyles="true"
                                             RemoveHtmlComments="true"
                                             RemoveAllAttributes="true"
                                             StripTags="@StripTags"
                                             RemoveAttributes="@RemoveAttributes">
                        </EditorPasteSettings>
                    </EditorSettings>
                </TelerikEditor>
            }
        </div>
        <div class="small-element-separator"></div>
        <div class="form-group">
            <label class="form-label">@TextProvider.Get("BACKEND_HOMEPAGE_HIGHLIGHT")</label>
            <SfSwitch @bind-Checked="Data.Highlight"></SfSwitch>
        </div>
        <div class="small-element-separator"></div>
        <div class="form-group">
            <label class="form-label">@TextProvider.Get("BACKEND_HOMEPAGE_DOCUMENT_RELEASE_DATE")</label>
            <TelerikDatePicker Format="dd.MM.yyyy" @bind-Value="Data.ReleaseDate" class="form-control"></TelerikDatePicker>
        </div>
        <div class="small-element-separator"></div>
        <div class="form-group">
            <label class="form-label">@TextProvider.Get("BACKEND_HOMEPAGE_DOCUMENT_TYPE")</label>
            @if (Types != null)
            {
                var htmlProperties = new Dictionary<string, object>() { { "height", "38px" } };

                <SfMultiSelect PopupHeight="230px" Width="100%"
                               @bind-Value="@SelectedTypes" DataSource="@Types" HtmlAttributes="@htmlProperties">
                    <MultiSelectFieldSettings Value="ID" Text="Type"></MultiSelectFieldSettings>
                </SfMultiSelect>
            }
        </div>
        <div class="element-separator"></div>
        <div class="form-group">
            <div class="segment-title custom-color-primary">@TextProvider.Get("BACKEND_HOMEPAGE_DOCUMENT_KONTAKT")</div>
        </div>
        <div class="small-element-separator"></div>
        <div class="form-group">
            <label class="form-label">@TextProvider.Get("BACKEND_HOMEPAGE_DOCUMENT_AUTHORITIES")</label>
            <AuthorityMultipleSelection @bind-SelectedAuthorities="@SelectedAuthorities"></AuthorityMultipleSelection>
        </div>
        <div class="element-separator"></div>
        <div class="form-group">
            <div class="segment-title custom-color-primary">@TextProvider.Get("BACKEND_HOMEPAGE_MANAGED")</div>
        </div>
        <div class="small-element-separator"></div>
        <div class="form-group">
            <label class="form-label">@TextProvider.Get("BACKEND_HOMEPAGE_THEMES")</label>
            <ThemeSelection @bind-SelectedThemes="@SelectedThemes"></ThemeSelection>
        </div>
        <div class="small-element-separator"></div>
        <div class="form-group">
            <label class="form-label">@TextProvider.Get("BACKEND_HOMEPAGE_MANAGED_BY_PERSON")</label>
            <PersonSingleSelection @bind-SelectedPersonID="@Data.Managed_HOME_Person_ID"></PersonSingleSelection>
        </div>
        <div class="small-element-separator"></div>
        <div class="form-group">
            <label class="form-label">@TextProvider.Get("BACKEND_HOMEPAGE_MANAGED_BY_AUTHORITY")</label>
            <AuthoritySingleSelection @bind-SelectedAuthorityID="@Data.Managed_AUTH_Authority_ID"></AuthoritySingleSelection>
        </div>
        <div class="element-separator"></div>
        <div class="form-group">
            <div class="segment-title">@TextProvider.Get("BACKEND_HOMEPAGE_DOKUMENTS")</div>
        </div>
        <div class="small-element-separator"></div>
        <div class="form-group">
            @if (Languages != null)
            {
                @foreach (var l in Languages)
                {
                    <div class="form-group">
                        <label class="form-label custom-color-primary">@TextProvider.Get(l.TEXT_SystemsText_Code)</label>
                    </div>
                    <div class="small-element-separator"></div>
                    <div class="form-group">
                        @if (Data.HOME_Document_Data != null && Data.HOME_Document_Data.Count() > 0)
                        {
                            <UploadComponent ID="@("docUpload_" + l.ID)" @bind-FileInfo="Data.HOME_Document_Data.FirstOrDefault(p => p.LANG_Language_ID == l.ID).File" Multiple="false"></UploadComponent>
                        }
                    </div>
                    <div class="element-separator"></div>
                }
            }
        </div>
        <div class="element-separator"></div>
        <div class="form-button-container-separated">
            <TelerikButton ButtonType="ButtonType.Button" ThemeColor="Secondary" Icon="SvgIcon.X" Class="k-standalone-button"
                           OnClick="@Cancel">@TextProvider.Get("BUTTON_CANCEL")</TelerikButton>
            <TelerikButton ButtonType="ButtonType.Button" ThemeColor="Primary" Icon="SvgIcon.ArrowRight" Class="k-standalone-button"
                           OnClick="@Save">@TextProvider.Get("BUTTON_SAVE")</TelerikButton>
        </div>
    </EditForm>
}